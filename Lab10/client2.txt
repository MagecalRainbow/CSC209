Script started on 2019-11-22 17:41:26-0500
]0;parkhoky@wolf:/h/u7/c7/04/parkhoky/CSC209/parkhoky/lab10wolf:~/CSC209/parkhoky/lab10$ gdb ./randclient
GNU gdb (Ubuntu 8.1-0ubuntu3.2) 8.1.0.20180409-git
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
<http://www.gnu.org/software/gdb/documentation/>.
For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from ./randclient...done.
(gdb) break main
Breakpoint 1 at 0xc69: file randclient.c, line 24.
(gdb) e[Kf[Kr [K[Kr [K cloi[K[K[K[K127.0.0.1
Starting program: /h/u7/c7/04/parkhoky/CSC209/parkhoky/lab10/randclient 127.0.0.1

Breakpoint 1, main (argc=2, argv=0x7fffffffea78) at randclient.c:24
24          if (argc != 2) {
(gdb) next
29          int soc = connect_to_server(PORT, argv[1]);
(gdb) 
31          write_random_pieces(soc, MESSAGE, TIMES);
(gdb) step
write_random_pieces (soc=3, message=0x5555555551e0 "A stitch in time\r\n", times=5)
    at randclient.c:42
42      void write_random_pieces(int soc, const char *message, int times) {
(gdb) next
44          int message_len = strlen(message);
(gdb) 
45          int total_bytes = times * message_len;
(gdb) 
46          int current_byte = 0;
(gdb) 
48          while (current_byte < total_bytes) {
(gdb) 
49              int piece_size = rand() % (MAXCHARS - MINCHARS + 1) + MINCHARS;
(gdb) 
50              int bytes_left = total_bytes - current_byte;
(gdb) 
51              if (piece_size > bytes_left) {
(gdb) 
55              for (int i = 0; i < piece_size; i++) {
(gdb) 
56                  piece[i] = message[(current_byte + i) % message_len];
(gdb) 
55              for (int i = 0; i < piece_size; i++) {
(gdb) 
56                  piece[i] = message[(current_byte + i) % message_len];
(gdb) 
55              for (int i = 0; i < piece_size; i++) {
(gdb) 
56                  piece[i] = message[(current_byte + i) % message_len];
(gdb) 
55              for (int i = 0; i < piece_size; i++) {
(gdb) 
56                  piece[i] = message[(current_byte + i) % message_len];
(gdb) 
55              for (int i = 0; i < piece_size; i++) {
(gdb) 
56                  piece[i] = message[(current_byte + i) % message_len];
(gdb) 
55              for (int i = 0; i < piece_size; i++) {
(gdb) 
56                  piece[i] = message[(current_byte + i) % message_len];
(gdb) 
55              for (int i = 0; i < piece_size; i++) {
(gdb) 
58              write(soc, piece, piece_size);
(gdb) 
59              current_byte += piece_size;
(gdb) 
48          while (current_byte < total_bytes) {
(gdb) 
49              int piece_size = rand() % (MAXCHARS - MINCHARS + 1) + MINCHARS;
(gdb) 
50              int bytes_left = total_bytes - current_byte;
(gdb) 
51              if (piece_size > bytes_left) {
(gdb) 
55              for (int i = 0; i < piece_size; i++) {
(gdb) 
56                  piece[i] = message[(current_byte + i) % message_len];
(gdb) 
55              for (int i = 0; i < piece_size; i++) {
(gdb) 
56                  piece[i] = message[(current_byte + i) % message_len];
(gdb) 
55              for (int i = 0; i < piece_size; i++) {
(gdb) 
56                  piece[i] = message[(current_byte + i) % message_len];
(gdb) 
55              for (int i = 0; i < piece_size; i++) {
(gdb) 
56                  piece[i] = message[(current_byte + i) % message_len];
(gdb) 
55              for (int i = 0; i < piece_size; i++) {
(gdb) 
58              write(soc, piece, piece_size);
(gdb) 
59              current_byte += piece_size;
(gdb) 
48          while (current_byte < total_bytes) {
(gdb) 
49              int piece_size = rand() % (MAXCHARS - MINCHARS + 1) + MINCHARS;
(gdb) 
50              int bytes_left = total_bytes - current_byte;
(gdb) 
51              if (piece_size > bytes_left) {
(gdb) 
55              for (int i = 0; i < piece_size; i++) {
(gdb) 
56                  piece[i] = message[(current_byte + i) % message_len];
(gdb) 
55              for (int i = 0; i < piece_size; i++) {
(gdb) 
56                  piece[i] = message[(current_byte + i) % message_len];
(gdb) 
55              for (int i = 0; i < piece_size; i++) {
(gdb) 
56                  piece[i] = message[(current_byte + i) % message_len];
(gdb) 
55              for (int i = 0; i < piece_size; i++) {
(gdb) 
56                  piece[i] = message[(current_byte + i) % message_len];
(gdb) 
55              for (int i = 0; i < piece_size; i++) {
(gdb) 
56                  piece[i] = message[(current_byte + i) % message_len];
(gdb) 
55              for (int i = 0; i < piece_size; i++) {
(gdb) 
58              write(soc, piece, piece_size);
(gdb) 
59              current_byte += piece_size;
(gdb) 
48          while (current_byte < total_bytes) {
(gdb) 
49              int piece_size = rand() % (MAXCHARS - MINCHARS + 1) + MINCHARS;
(gdb) 
50              int bytes_left = total_bytes - current_byte;
(gdb) 
51              if (piece_size > bytes_left) {
(gdb) 
55              for (int i = 0; i < piece_size; i++) {
(gdb) 
56                  piece[i] = message[(current_byte + i) % message_len];
(gdb) 
55              for (int i = 0; i < piece_size; i++) {
(gdb) 
56                  piece[i] = message[(current_byte + i) % message_len];
(gdb) 
55              for (int i = 0; i < piece_size; i++) {
(gdb) 
56                  piece[i] = message[(current_byte + i) % message_len];
(gdb) 
55              for (int i = 0; i < piece_size; i++) {
(gdb) 
58              write(soc, piece, piece_size);
(gdb) 
59              current_byte += piece_size;
(gdb) 
48          while (current_byte < total_bytes) {
(gdb) 
49              int piece_size = rand() % (MAXCHARS - MINCHARS + 1) + MINCHARS;
(gdb) 
50              int bytes_left = total_bytes - current_byte;
(gdb) 
51              if (piece_size > bytes_left) {
(gdb) 
55              for (int i = 0; i < piece_size; i++) {
(gdb) 
56                  piece[i] = message[(current_byte + i) % message_len];
(gdb) 
55              for (int i = 0; i < piece_size; i++) {
(gdb) 
56                  piece[i] = message[(current_byte + i) % message_len];
(gdb) 
55              for (int i = 0; i < piece_size; i++) {
(gdb) 
56                  piece[i] = message[(current_byte + i) % message_len];
(gdb) 
55              for (int i = 0; i < piece_size; i++) {
(gdb) 
56                  piece[i] = message[(current_byte + i) % message_len];
(gdb) 
55              for (int i = 0; i < piece_size; i++) {
(gdb) 
56                  piece[i] = message[(current_byte + i) % message_len];
(gdb) 
55              for (int i = 0; i < piece_size; i++) {
(gdb) 
56                  piece[i] = message[(current_byte + i) % message_len];
(gdb) 
55              for (int i = 0; i < piece_size; i++) {
(gdb) 
58              write(soc, piece, piece_size);
(gdb) 
59              current_byte += piece_size;
(gdb) 
48          while (current_byte < total_bytes) {
(gdb) 
49              int piece_size = rand() % (MAXCHARS - MINCHARS + 1) + MINCHARS;
(gdb) 
50              int bytes_left = total_bytes - current_byte;
(gdb) 
51              if (piece_size > bytes_left) {
(gdb) 
55              for (int i = 0; i < piece_size; i++) {
(gdb) 
56                  piece[i] = message[(current_byte + i) % message_len];
(gdb) 
55              for (int i = 0; i < piece_size; i++) {
(gdb) 
56                  piece[i] = message[(current_byte + i) % message_len];
(gdb) 
55              for (int i = 0; i < piece_size; i++) {
(gdb) 
56                  piece[i] = message[(current_byte + i) % message_len];
(gdb) 
55              for (int i = 0; i < piece_size; i++) {
(gdb) 
58              write(soc, piece, piece_size);
(gdb) 
59              current_byte += piece_size;
(gdb) 
48          while (current_byte < total_bytes) {
(gdb) 
49              int piece_size = rand() % (MAXCHARS - MINCHARS + 1) + MINCHARS;
(gdb) 
50              int bytes_left = total_bytes - current_byte;
(gdb) 
51              if (piece_size > bytes_left) {
(gdb) 
55              for (int i = 0; i < piece_size; i++) {
(gdb) 
56                  piece[i] = message[(current_byte + i) % message_len];
(gdb) 
55              for (int i = 0; i < piece_size; i++) {
(gdb) 
56                  piece[i] = message[(current_byte + i) % message_len];
(gdb) 
55              for (int i = 0; i < piece_size; i++) {
(gdb) 
56                  piece[i] = message[(current_byte + i) % message_len];
(gdb) 
55              for (int i = 0; i < piece_size; i++) {
(gdb) 
56                  piece[i] = message[(current_byte + i) % message_len];
(gdb) 
55              for (int i = 0; i < piece_size; i++) {
(gdb) 
58              write(soc, piece, piece_size);
(gdb) 
59              current_byte += piece_size;
(gdb) 
48          while (current_byte < total_bytes) {
(gdb) 
49              int piece_size = rand() % (MAXCHARS - MINCHARS + 1) + MINCHARS;
(gdb) 
50              int bytes_left = total_bytes - current_byte;
(gdb) 
51              if (piece_size > bytes_left) {
(gdb) 
55              for (int i = 0; i < piece_size; i++) {
(gdb) 
56                  piece[i] = message[(current_byte + i) % message_len];
(gdb) 
55              for (int i = 0; i < piece_size; i++) {
(gdb) 
56                  piece[i] = message[(current_byte + i) % message_len];
(gdb) 
55              for (int i = 0; i < piece_size; i++) {
(gdb) 
56                  piece[i] = message[(current_byte + i) % message_len];
(gdb) 
55              for (int i = 0; i < piece_size; i++) {
(gdb) 
56                  piece[i] = message[(current_byte + i) % message_len];
(gdb) 
55              for (int i = 0; i < piece_size; i++) {
(gdb) 
56                  piece[i] = message[(current_byte + i) % message_len];
(gdb) 
55              for (int i = 0; i < piece_size; i++) {
(gdb) 
58              write(soc, piece, piece_size);
(gdb) 
59              current_byte += piece_size;
(gdb) 
48          while (current_byte < total_bytes) {
(gdb) 
49              int piece_size = rand() % (MAXCHARS - MINCHARS + 1) + MINCHARS;
(gdb) 
50              int bytes_left = total_bytes - current_byte;
(gdb) 
51              if (piece_size > bytes_left) {
(gdb) 
55              for (int i = 0; i < piece_size; i++) {
(gdb) 
56                  piece[i] = message[(current_byte + i) % message_len];
(gdb) 
55              for (int i = 0; i < piece_size; i++) {
(gdb) 
56                  piece[i] = message[(current_byte + i) % message_len];
(gdb) 
55              for (int i = 0; i < piece_size; i++) {
(gdb) 
56                  piece[i] = message[(current_byte + i) % message_len];
(gdb) 
55              for (int i = 0; i < piece_size; i++) {
(gdb) 
56                  piece[i] = message[(current_byte + i) % message_len];
(gdb) 
55              for (int i = 0; i < piece_size; i++) {
(gdb) 
56                  piece[i] = message[(current_byte + i) % message_len];
(gdb) 
55              for (int i = 0; i < piece_size; i++) {
(gdb) 
56                  piece[i] = message[(current_byte + i) % message_len];
(gdb) 
55              for (int i = 0; i < piece_size; i++) {
(gdb) 
56                  piece[i] = message[(current_byte + i) % message_len];
(gdb) 
55              for (int i = 0; i < piece_size; i++) {
(gdb) 
58              write(soc, piece, piece_size);
(gdb) 
59              current_byte += piece_size;
(gdb) 
48          while (current_byte < total_bytes) {
(gdb) 
49              int piece_size = rand() % (MAXCHARS - MINCHARS + 1) + MINCHARS;
(gdb) 
50              int bytes_left = total_bytes - current_byte;
(gdb) 
51              if (piece_size > bytes_left) {
(gdb) 
55              for (int i = 0; i < piece_size; i++) {
(gdb) 
56                  piece[i] = message[(current_byte + i) % message_len];
(gdb) 
55              for (int i = 0; i < piece_size; i++) {
(gdb) 
56                  piece[i] = message[(current_byte + i) % message_len];
(gdb) 
55              for (int i = 0; i < piece_size; i++) {
(gdb) 
56                  piece[i] = message[(current_byte + i) % message_len];
(gdb) 
55              for (int i = 0; i < piece_size; i++) {
(gdb) 
56                  piece[i] = message[(current_byte + i) % message_len];
(gdb) 
55              for (int i = 0; i < piece_size; i++) {
(gdb) 
58              write(soc, piece, piece_size);
(gdb) 
59              current_byte += piece_size;
(gdb) 
48          while (current_byte < total_bytes) {
(gdb) 
49              int piece_size = rand() % (MAXCHARS - MINCHARS + 1) + MINCHARS;
(gdb) 
50              int bytes_left = total_bytes - current_byte;
(gdb) 
51              if (piece_size > bytes_left) {
(gdb) 
55              for (int i = 0; i < piece_size; i++) {
(gdb) 
56                  piece[i] = message[(current_byte + i) % message_len];
(gdb) 
55              for (int i = 0; i < piece_size; i++) {
(gdb) 
56                  piece[i] = message[(current_byte + i) % message_len];
(gdb) 
55              for (int i = 0; i < piece_size; i++) {
(gdb) 
56                  piece[i] = message[(current_byte + i) % message_len];
(gdb) 
55              for (int i = 0; i < piece_size; i++) {
(gdb) 
56                  piece[i] = message[(current_byte + i) % message_len];
(gdb) 
55              for (int i = 0; i < piece_size; i++) {
(gdb) 
56                  piece[i] = message[(current_byte + i) % message_len];
(gdb) 
55              for (int i = 0; i < piece_size; i++) {
(gdb) 
58              write(soc, piece, piece_size);
(gdb) 
59              current_byte += piece_size;
(gdb) 
48          while (current_byte < total_bytes) {
(gdb) 
49              int piece_size = rand() % (MAXCHARS - MINCHARS + 1) + MINCHARS;
(gdb) 
50              int bytes_left = total_bytes - current_byte;
(gdb) 
51              if (piece_size > bytes_left) {
(gdb) 
55              for (int i = 0; i < piece_size; i++) {
(gdb) 
56                  piece[i] = message[(current_byte + i) % message_len];
(gdb) 
55              for (int i = 0; i < piece_size; i++) {
(gdb) 
56                  piece[i] = message[(current_byte + i) % message_len];
(gdb) 
55              for (int i = 0; i < piece_size; i++) {
(gdb) 
56                  piece[i] = message[(current_byte + i) % message_len];
(gdb) 
55              for (int i = 0; i < piece_size; i++) {
(gdb) 
56                  piece[i] = message[(current_byte + i) % message_len];
(gdb) 
55              for (int i = 0; i < piece_size; i++) {
(gdb) 
56                  piece[i] = message[(current_byte + i) % message_len];
(gdb) 
55              for (int i = 0; i < piece_size; i++) {
(gdb) 
58              write(soc, piece, piece_size);
(gdb) 
59              current_byte += piece_size;
(gdb) 
48          while (current_byte < total_bytes) {
(gdb) 
49              int piece_size = rand() % (MAXCHARS - MINCHARS + 1) + MINCHARS;
(gdb) 
50              int bytes_left = total_bytes - current_byte;
(gdb) 
51              if (piece_size > bytes_left) {
(gdb) 
55              for (int i = 0; i < piece_size; i++) {
(gdb) 
56                  piece[i] = message[(current_byte + i) % message_len];
(gdb) 
55              for (int i = 0; i < piece_size; i++) {
(gdb) 
56                  piece[i] = message[(current_byte + i) % message_len];
(gdb) 
55              for (int i = 0; i < piece_size; i++) {
(gdb) 
56                  piece[i] = message[(current_byte + i) % message_len];
(gdb) 
55              for (int i = 0; i < piece_size; i++) {
(gdb) 
58              write(soc, piece, piece_size);
(gdb) 
59              current_byte += piece_size;
(gdb) 
48          while (current_byte < total_bytes) {
(gdb) 
49              int piece_size = rand() % (MAXCHARS - MINCHARS + 1) + MINCHARS;
(gdb) 
50              int bytes_left = total_bytes - current_byte;
(gdb) 
51              if (piece_size > bytes_left) {
(gdb) 
55              for (int i = 0; i < piece_size; i++) {
(gdb) 
56                  piece[i] = message[(current_byte + i) % message_len];
(gdb) 
55              for (int i = 0; i < piece_size; i++) {
(gdb) 
56                  piece[i] = message[(current_byte + i) % message_len];
(gdb) 
55              for (int i = 0; i < piece_size; i++) {
(gdb) 
56                  piece[i] = message[(current_byte + i) % message_len];
(gdb) 
55              for (int i = 0; i < piece_size; i++) {
(gdb) 
56                  piece[i] = message[(current_byte + i) % message_len];
(gdb) 
55              for (int i = 0; i < piece_size; i++) {
(gdb) 
56                  piece[i] = message[(current_byte + i) % message_len];
(gdb) 
55              for (int i = 0; i < piece_size; i++) {
(gdb) 
56                  piece[i] = message[(current_byte + i) % message_len];
(gdb) 
55              for (int i = 0; i < piece_size; i++) {
(gdb) 
56                  piece[i] = message[(current_byte + i) % message_len];
(gdb) 
55              for (int i = 0; i < piece_size; i++) {
(gdb) 
58              write(soc, piece, piece_size);
(gdb) 
59              current_byte += piece_size;
(gdb) 
48          while (current_byte < total_bytes) {
(gdb) 
49              int piece_size = rand() % (MAXCHARS - MINCHARS + 1) + MINCHARS;
(gdb) 
50              int bytes_left = total_bytes - current_byte;
(gdb) 
51              if (piece_size > bytes_left) {
(gdb) 
55              for (int i = 0; i < piece_size; i++) {
(gdb) 
56                  piece[i] = message[(current_byte + i) % message_len];
(gdb) 
55              for (int i = 0; i < piece_size; i++) {
(gdb) 
56                  piece[i] = message[(current_byte + i) % message_len];
(gdb) 
55              for (int i = 0; i < piece_size; i++) {
(gdb) 
56                  piece[i] = message[(current_byte + i) % message_len];
(gdb) 
55              for (int i = 0; i < piece_size; i++) {
(gdb) 
56                  piece[i] = message[(current_byte + i) % message_len];
(gdb) 
55              for (int i = 0; i < piece_size; i++) {
(gdb) 
56                  piece[i] = message[(current_byte + i) % message_len];
(gdb) 
55              for (int i = 0; i < piece_size; i++) {
(gdb) 
56                  piece[i] = message[(current_byte + i) % message_len];
(gdb) 
55              for (int i = 0; i < piece_size; i++) {
(gdb) 
58              write(soc, piece, piece_size);
(gdb) 
59              current_byte += piece_size;
(gdb) 
48          while (current_byte < total_bytes) {
(gdb) 
49              int piece_size = rand() % (MAXCHARS - MINCHARS + 1) + MINCHARS;
(gdb) 
50              int bytes_left = total_bytes - current_byte;
(gdb) 
51              if (piece_size > bytes_left) {
(gdb) 
55              for (int i = 0; i < piece_size; i++) {
(gdb) 
56                  piece[i] = message[(current_byte + i) % message_len];
(gdb) 
55              for (int i = 0; i < piece_size; i++) {
(gdb) 
56                  piece[i] = message[(current_byte + i) % message_len];
(gdb) 
55              for (int i = 0; i < piece_size; i++) {
(gdb) 
56                  piece[i] = message[(current_byte + i) % message_len];
(gdb) 
55              for (int i = 0; i < piece_size; i++) {
(gdb) 
56                  piece[i] = message[(current_byte + i) % message_len];
(gdb) 
55              for (int i = 0; i < piece_size; i++) {
(gdb) 
58              write(soc, piece, piece_size);
(gdb) 
59              current_byte += piece_size;
(gdb) 
48          while (current_byte < total_bytes) {
(gdb) 
49              int piece_size = rand() % (MAXCHARS - MINCHARS + 1) + MINCHARS;
(gdb) 
50              int bytes_left = total_bytes - current_byte;
(gdb) 
51              if (piece_size > bytes_left) {
(gdb) 
55              for (int i = 0; i < piece_size; i++) {
(gdb) 
56                  piece[i] = message[(current_byte + i) % message_len];
(gdb) 
55              for (int i = 0; i < piece_size; i++) {
(gdb) 
56                  piece[i] = message[(current_byte + i) % message_len];
(gdb) 
55              for (int i = 0; i < piece_size; i++) {
(gdb) 
56                  piece[i] = message[(current_byte + i) % message_len];
(gdb) 
55              for (int i = 0; i < piece_size; i++) {
(gdb) 
58              write(soc, piece, piece_size);
(gdb) 
59              current_byte += piece_size;
(gdb) 
48          while (current_byte < total_bytes) {
(gdb) 
49              int piece_size = rand() % (MAXCHARS - MINCHARS + 1) + MINCHARS;
(gdb) finish
Run till exit from #0  write_random_pieces (soc=3, 
    message=0x5555555551e0 "A stitch in time\r\n", times=5) at randclient.c:49
main (argc=2, argv=0x7fffffffea78) at randclient.c:33
33          close(soc);
(gdb) next
34          return 0;
(gdb) q[Kq
A debugging session is active.

        Inferior 1 [process 47513] will be killed.

Quit anyway? (y or n) y
]0;parkhoky@wolf:/h/u7/c7/04/parkhoky/CSC209/parkhoky/lab10wolf:~/CSC209/parkhoky/lab10$ exit
exit

Script done on 2019-11-22 17:48:05-0500
